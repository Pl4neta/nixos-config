;;||===================================||
;;||								   ||
;;||			 VARIABLES  		   ||
;;||                                   ||
;;||===================================||

;; profile vars
(defvar IMAGE "src/profile.jpg")
(defvar NAME "P4lmeiras")
(defpoll UNAME :interval "5m" `whoami`)

;; System vars
(defpoll HOST :interval "5s" `hostname`)
(defpoll CPU_USAGE :interval "1s" `scripts/sys_info --cpu`)
(defpoll MEM_USAGE :interval "1s" `scripts/sys_info --mem`)
(defpoll BLIGHT :interval "1s" `scripts/sys_info --blight`)
(defpoll BATTERY :interval "5s" `scripts/sys_info --bat`)

;; time vars
(defpoll YEAR :interval "5s" `date +\"%Y\"`)
(defpoll MONTH :interval "5s" `date +\"%m\"`)
(defpoll DAY :interval "5s" `date +\"%d\"`)
(defpoll HOUR :interval "5s" `date +\"%H\"`)
(defpoll MIN :interval "5s" `date +\"%M\"`)

;; fetch vars
(defvar DISTRO "Arch")
(defpoll WM :interval "12h" `wmctrl -m | grep Name | awk '{print $2}'`)
(defpoll SHELL :interval "10m" `echo $SHELL | awk -F'/' '{print $NF}'`)
(defpoll UPTIME :interval "1m" "uptime -p | sed -e 's/up //;s/ hours,/h/;s/ minutes/m/'")
(defpoll PACKAGES :interval "5m" `pacman -Q | wc -l`)

;; weather vars
(defpoll ICON :interval "15m" `scripts/weather_info --icon`)
(defpoll STAT :interval "15m" `scripts/weather_info --stat`)
(defpoll TEMP :interval "15m" `scripts/weather_info --temp`)
(defpoll HEX :interval "15m" `scripts/weather_info --hex`)
(defpoll QUOTE :interval "15m" `scripts/weather_info --quote`)
(defpoll QUOTE2 :interval "15m" `scripts/weather_info --quote2`)

;; music vars
(deflisten TITLE `zscroll --length 26 --delay 0.5 --scroll-padding '          ' --update-check true 'playerctl --player=playerctld metadata title'`)
(defpoll ARTIST :interval "1s"  `playerctl --player=playerctld metadata artist`)
(defpoll STATUS :interval "1s"  `scripts/music_info --status`)
(defpoll LENGTH :interval "1s"  `echo $(($(playerctl --player=playerctld metadata mpris:length)/1000))`)
(defpoll POSITION :interval "1s"  `echo "$(playerctl --player=playerctld position)*1000" | bc | awk -F. '{print $1}'`)
(defpoll ARTURL :interval "1s"  `scripts/music_info --art`)

;; Apps vars
(defpoll MAILS :interval "5m" `scripts/mails`)


;;||===================================||
;;||								   ||
;;||			  WIDGETS			   ||
;;||                                   ||
;;||===================================||

;; background
(defwidget bg [] 
	(box :class "bg"))

;; profile
(defwidget user [] 
	(box :class "genwin" :orientation "v" :spacing 35 :space-evenly "false" :vexpand "false" :hexpand "false"
		(box :style "background-image: url('${IMAGE}');" :class "face" :halign "center")
		(label :class "fullname" :halign "center" :wrap "true" :limit-width 25 :text NAME)
		(label :class "username" :halign "center" :wrap "true" :limit-width 25 :text UNAME)))

;; system
(defwidget system [] 
	(box :class "genwin" :vexpand "false" :hexpand "false" 
		(box :orientation "h" :spacing 20 :halign "center" :valign "center" :space-evenly "false" :vexpand "false" :hexpand "false" 
			(box :orientation "v" :spacing 20 :space-evenly "false" :halignt "center" :vexpand "false" :hexpand "false" 
				(label :class "iconcpu" :text "" :width 50)
				(label :class "iconmem" :text "" :width 50)
				(label :class "iconbright" :text "󰃟" :width 50)
				(label :class "iconbat" :text "󰁾" :width 50))
			(box :orientation "v" :spacing 20 :space-evenly "true" :vexpand "false" :hexpand "false"
				(scale :class "cpu_bar" :min 0 :max 100 :value CPU_USAGE :active "false")
				(scale :class "mem_bar" :min 0 :max 100 :value MEM_USAGE :active "false")
				(scale :class "bright_bar" :min 0 :max 100 :value BLIGHT :active "false")
				(scale :class "bat_bar" :min 0 :max 100 :value BATTERY :active "false")))))

(defwidget calendarw []
	(box :class "genwin" :orientation "h" :vexpand "false" :hexpand "false"
    	(calendar :active "true" :day DAY :month MONTH :year YEAR :show-details "true" :show-heading "true" :show-day-names "true")))

;; time
(defwidget time []
	(box :class "genwin" :orientation "v" :vexpand "false" :hexpand "false"
		(box :orientation "D" :valign "center" :halign "center"
			(label :class "time_hour" :text HOUR)
			(label :class "time_div" :text ":")
			(label :class "time_min" :text MIN))))

;; fetch
(defwidget fetch []
	(box :class "genwin" :orientation "h"
		(box :class "fetch_items" :orientation "v" :space-evenly "true" :spacing 10 :halign "center"
			(label :class "distro" :halign "start" :text "󰣇 : ${DISTRO}")
			(label :class "winman" :halign "start" :text "󱂬 : ${WM}")
			(label :class "shell" :halign "start" :text " : ${SHELL}")
			(label :class "uptime" :halign "start" :text "󰥔 : ${UPTIME}")
			(label :class "packages" :halign "start" :text "󰏓 : ${PACKAGES}"))))
		

;; directories
(defwidget directories [] 
	(box :class "genwin" :vexpand "false" :hexpand "false"
		(box :orientation "v" :halign "center" :vexpand "false" :hexpand "false"
			(box :orientation "h" :space-evenly "false" :vexpand "false" :hexpand "false" 
				(button :class "iconfolder1" :onclick "scripts/open_dirs --docs" "󰉋")
				(button :class "label_folder1" :onclick "scripts/open_dirs --docs" "Documents"))
			(box :orientation "h" :space-evenly "false" :vexpand "false" :hexpand "false" 
				(button :class "iconfolder2" :onclick "scripts/open_dirs --dl" "󰉍")
				(button :class "label_folder2" :onclick "scripts/open_dirs --dl" "Downloads"))
			(box :orientation "h" :space-evenly "false" :vexpand "false" :hexpand "false" 
				(button :class "iconfolder3" :onclick "scripts/open_dirs --music" "󱍙")
				(button :class "label_folder3" :onclick "scripts/open_dirs --music" "Music"))
			(box :orientation "h" :space-evenly "false" :vexpand "false" :hexpand "false" 
				(button :class "iconfolder4" :onclick "scripts/open_dirs --pics" "󰉏")
				(button :class "label_folder4" :onclick "scripts/open_dirs --pics" "Pictures"))
			(box :orientation "h" :space-evenly "false" :vexpand "false" :hexpand "false" 
				(button :class "iconfolder5" :onclick "scripts/open_dirs --cfg" "󱁿")
				(button :class "label_folder5" :onclick "scripts/open_dirs --cfg" "~/.config"))
			(box :orientation "h" :space-evenly "false" :vexpand "false" :hexpand "false" 
				(button :class "iconfolder6" :onclick "scripts/open_dirs --local" "󱁿")
				(button :class "label_folder6" :onclick "scripts/open_dirs --local" "~/.local")))))

;; weather
(defwidget weather [] 
	(box :class "genwin" 
		(box :orientation "v" :spacing 10 :space-evenly "false" :vexpand "false" :hexpand "false" 
			(box :orientation "h" :vexpand "false" :hexpand "false" 
				(label :class "iconweather" :halign "start" :style "color: ${HEX};" :text ICON)
				(label :class "weather_temp" :halign "end" :text TEMP))
			(box :orientation "v" :spacing 10 :halign "center" :space-evenly "false" :vexpand "false" :hexpand "false" 
				(label :class "weather_stat" :halign "center" :text STAT)
				(label :class "weather_quote" :text QUOTE)
				(label :class "weather_quote weather_quote2" :text QUOTE2)))))

;;music
(defwidget music []
	(box :class "genwin" :orientation "h" :space-evenly "false" :vexpand "false" :hexpand "false"
    	(box :class "album_art" :style "background-image: url('${ARTURL}');")
    	(box :width 350 :orientation "v" :space-evenly "false" :valign "center" :halign "center" :spacing 20
			(box :orientation "v" :space-evenly "false" :spacing 5 :vexpand "false" :hexpand "false"
				(label :class "title" :text "${TITLE}" :limit-width "26")
				(label :class "artist" :text "${ARTIST}" :limit-width "25"))
			(box :orientation "h" :halign "center" :space-evenly "false" :spacing 40
				(button :class "song_prev" :onclick "playerctl --player=playerctld previous" "󰙣")
				(button :class "song_play" :onclick "playerctl --player=playerctld play-pause" STATUS)
				(button :class "song_next" :onclick "playerctl --player=playerctld next" "󰙡"))
			(box :class "song_bar"
				(scale :onscroll "" :min 0 :active "true" :max LENGTH :value POSITION)))))

;; powerMenu
(defwidget power[]
	(box :class "genwin" :orientation "h" :space-evenly "true" :vexpand "false" :hexpand "false" 
		(button :class "power_shutdown" :onclick "systemctl poweroff" "󰐥")
		(button :class "power_reboot" :onclick "systemctl reboot" "󰑐")
		(button :class "power_lock" :onclick "" "󰌾")
		(button :class "power_sleep" :onclick "systemctl suspend" "󰤄")
		(button :class "power_logout" :onclick "openbox --exit" "󰍃")))

;; mail
(defwidget mail []
	(box :class "genwin" :orientation "h" :space-evenly "true" :vexpand "false" :hexpand "false"
		(box :orientation "v" :halign "center" :valign "center" :space-evenly "false" :vexpand "false" :hexpand "false" 
			(button :class "iconmail" :onclick "scripts/open_apps --mail" "")
			(button :class "label_mails" :onclick "scripts/open_apps --mail" MAILS))))

;; appsDrawer
(defwidget apps []
	(box :class "genwin" :orientation "v" :space-evenly "true" :vexpand "false" :hexpand "false"
		(box :class "apps_margin" :orientation "v" :space-evenly "true"
		(box :orientation "h" :space-evenly "false" :halign "center" :valign "center"
		(button :style "background-image: url('src/icons/firefox.svg');" :class "app_firefox" :onclick "scripts/open_apps --ff"))
		(box :orientation "h" :space-evenly "true" :halign "center" :valign "center"
		(button :style "background-image: url('src/icons/signal.svg');" :class "app_signal" :onclick "scripts/open_apps --sn"))
		(box :orientation "h" :space-evenly "true" :halign "center" :valign "center"
		(button :style "background-image: url('src/icons/discord.svg');" :class "app_discord" :onclick "scripts/open_apps --dc"))
		(box :orientation "h" :space-evenly "true" :halign "center" :valign "center"
		(button :style "background-image: url('src/icons/spotify.svg');" :class "app_spotify" :onclick "scripts/open_apps --si"))
		(box :orientation "h" :space-evenly "true" :halign "center" :valign "center"
		(button :style "background-image: url('src/icons/github.svg');" :class "app_github" :onclick "scripts/open_apps --gh"))
		(box :orientation "h" :space-evenly "true" :halign "center" :valign "center"
		(button :style "background-image: url('src/icons/vscode.svg');" :class "app_code" :onclick "scripts/open_apps --cd"))
		(box :orientation "h" :space-evenly "true" :halign "center" :valign "center"
		(button :style "background-image: url('src/icons/lutris.svg');" :class "app_lutris" :onclick "scripts/open_apps --lt")))))










;;||===================================||
;;||								   ||
;;||			  WINDOWS			   ||
;;||                                   ||
;;||===================================||

;; background
(defwindow background :stacking "fg" :focusable "false" :screen 1 
	:geometry (geometry :x 0 :y 0 :width "1920px" :height "1080px")
		(bg))

;; profile
(defwindow profile :stacking "fg" :focusable "false" :screen 1 
	:geometry (geometry :x 150 :y 150 :width 350 :height 445)
		(user))

;; system
(defwindow system :stacking "fg" :focusable "false" :screen 1 
	:geometry (geometry :x 150 :y 610 :width 350 :height 320)
		(system))

;;calendar
(defwindow calendar :stacking "fg" :focusable "true" :screen 1 
	:geometry (geometry :x 515 :y 150 :width 550 :height 325)
		(calendarw))

;; time
(defwindow time :stacking "fg" :focusable "false" :screen 1
	:geometry (geometry :x 515 :y 490 :width 440 :height 125)
		(time))

;; fetch
(defwindow fetch :stacking "fg" :focusable "false" :screen 1
		:geometry (geometry :x 515 :y 630 :width 175 :height 300)
					(fetch))

;; directories
(defwindow directories :stacking "fg" :focusable "false" :screen 1 
	    :geometry (geometry :x 705 :y 630 :width 250 :height 300)
					(directories))

;; weather
(defwindow weather :stacking "fg" :focusable "false" :screen 1 
	    :geometry (geometry :x 1080 :y 150 :width 550 :height 325)
					(weather))

;;music
(defwindow music :stacking "fg" :focusable "false" :screen 1 
	    :geometry (geometry :x 970 :y 490 :width 660 :height 300)
					(music))

;; powermenu
(defwindow power :stacking "fg" :focusable "false" :screen 1 
	    :geometry (geometry :x 970 :y 805 :width 500 :height 125)
					(power))

;; mail
(defwindow mail :stacking "fg" :focusable "false" :screen 1
		:geometry (geometry :x 1485 :y 805 :width 145 :height 125)
					(mail))

;; apps drawer
(defwindow apps :stacking "fg" :focusable "false" :screen 1 
	    :geometry (geometry :x 1645 :y 150 :width 125 :height 780)
					(apps))








