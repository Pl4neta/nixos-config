;;||===================================||
;;||								   ||
;;||			 VARIABLES  		   ||
;;||                                   ||
;;||===================================||

;; profile vars
(defvar IMAGE "src/profile.jpg")
(defvar NAME "P4lmeiras")
(defpoll UNAME :interval "5m" `whoami`)

;; System vars
(defpoll HOST :interval "5s" `hostname`)
(defpoll CPU_USAGE :interval "1s" `scripts/sys_info --cpu`)
(defpoll MEM_USAGE :interval "1s" `scripts/sys_info --mem`)
(defpoll BLIGHT :interval "1s" `scripts/sys_info --blight`)
(defpoll BATTERY :interval "5s" `scripts/sys_info --bat`)

;; time vars
(defpoll YEAR :interval "5s" `date +\"%Y\"`)
(defpoll MONTH :interval "5s" `date +\"%m\"`)
(defpoll DAY :interval "5s" `date +\"%d\"`)
(defpoll HOUR :interval "5s" `date +\"%H\"`)
(defpoll MIN :interval "5s" `date +\"%M\"`)

;; fetch vars
(defvar DISTRO "Arch")
(defpoll wm :interval "12h" `wmctrl -m | grep Name | awk '{print $2}'`)
(defpoll shell :interval "10m" `echo $SHELL | awk -F'/' '{print $NF}'`)
(defpoll uptime :interval "1m" "uptime -p | sed -e 's/up //;s/ hours,/h/;s/ minutes/m/'")
(defpoll packages :interval "5m" `pacman -Q | wc -l`)

;; weather vars
(defpoll ICON :interval "15m" `scripts/weather_info --icon`)
(defpoll STAT :interval "15m" `scripts/weather_info --stat`)
(defpoll TEMP :interval "15m" `scripts/weather_info --temp`)
(defpoll HEX :interval "15m" `scripts/weather_info --hex`)
(defpoll QUOTE :interval "15m" `scripts/weather_info --quote`)
(defpoll QUOTE2 :interval "15m" `scripts/weather_info --quote2`)

;; music vars
(defpoll pp-icon :interval "1s"  "scripts/dashboard/get-title --icon")


;;||===================================||
;;||								   ||
;;||			  WIDGETS			   ||
;;||                                   ||
;;||===================================||

;; background
(defwidget bg [] 
	(box :class "bg"))

;; profile
(defwidget user [] 
	(box :class "genwin" :orientation "v" :spacing 35 :space-evenly "false" :vexpand "false" :hexpand "false"
		(box :style "background-image: url('${IMAGE}');" :class "face" :halign "center")
		(label :class "fullname" :halign "center" :wrap "true" :limit-width 25 :text NAME)
		(label :class "username" :halign "center" :wrap "true" :limit-width 25 :text UNAME)))

;; system
(defwidget system [] 
	(box :class "genwin" :vexpand "false" :hexpand "false" 
		(box :orientation "v" :spacing 35 :halign "center" :valign "center" :space-evenly "false" :vexpand "false" :hexpand "false" 
			(box :class "cpu_bar" :orientation "h" :spacing 20 :space-evenly "false" :vexpand "false" :hexpand "false" 
				(label :class "iconcpu" :text "")
				(scale :min 0 :max 100 :value CPU_USAGE :active "false"))
			(box :class "mem_bar" :orientation "h" :spacing 20 :space-evenly "false" :vexpand "false" :hexpand "false" 
				(label :class "iconmem" :text "")
				(scale :min 0 :max 100 :value MEM_USAGE :active "false"))
			(box :class "bright_bar" :orientation "h" :spacing 20 :space-evenly "false" :vexpand "false" :hexpand "false" 
				(label :class "iconbright" :text "󰃟")
				(scale :min 0 :max 100 :value BLIGHT :active "false"))
			(box :class "bat_bar" :orientation "h" :spacing 20 :space-evenly "false" :vexpand "false" :hexpand "false" 
				(label :class "iconbat" :text "󰁾")
				(scale :min 0 :max 100 :value BATTERY :active "false")))))

(defwidget calendarw []
	(box :class "genwin" :orientation "h" :vexpand "false" :hexpand "false"
    	(calendar :active "true" :day DAY :month MONTH :year YEAR :show-details "true" :show-heading "true" :show-day-names "true")))

;; time
(defwidget time []
	(box :class "genwin" :orientation "v" :vexpand "false" :hexpand "false"
		(box :orientation "D" :valign "center" :halign "center"
			(label :class "time_hour" :text HOUR)
			(label :class "time_div" :text ":")
			(label :class "time_min" :text MIN))))

;; fetch
(defwidget fetch []
	(box :class "genwin" :orientation "h"
		(box :class "fetch_items" :orientation "v" :space-evenly "true" :spacing 10 :halign "center"
			(label :class "distro" :halign "start" :text "󰣇 : ${DISTRO}")
			(label :class "winman" :halign "start" :text "󱂬 : ${wm}")
			(label :class "shell" :halign "start" :text " : ${shell}")
			(label :class "uptime" :halign "start" :text "󰥔 : ${uptime}")
			(label :class "packages" :halign "start" :text "󰏓 : ${packages}"))))
		

;; directories
(defwidget directories [] 
	(box :class "genwin" :orientation "v" :vexpand "false" :hexpand "false"
		(box :orientation "h" :space-evenly "false" :vexpand "false" :hexpand "false" 
			(button :class "iconfolder1" :onclick "scripts/open_folders --docs" "󰉋")
			(button :class "label_folder1" :onclick "scripts/open_folders --docs" "Documents"))
		(box :orientation "h" :space-evenly "false" :vexpand "false" :hexpand "false" 
			(button :class "iconfolder2" :onclick "scripts/open_folders --dl" "󰉍")
			(button :class "label_folder2" :onclick "scripts/open_folders --dl" "Downloads"))
		(box :orientation "h" :space-evenly "false" :vexpand "false" :hexpand "false" 
			(button :class "iconfolder3" :onclick "scripts/open_folders --music" "󱍙")
			(button :class "label_folder3" :onclick "scripts/open_folders --music" "Music"))
		(box :orientation "h" :space-evenly "false" :vexpand "false" :hexpand "false" 
			(button :class "iconfolder4" :onclick "scripts/open_folders --pics" "󰉏")
			(button :class "label_folder4" :onclick "scripts/open_folders --pics" "Pictures"))
		(box :orientation "h" :space-evenly "false" :vexpand "false" :hexpand "false" 
			(button :class "iconfolder5" :onclick "scripts/open_folders --cfg" "󱁿")
			(button :class "label_folder5" :onclick "scripts/open_folders --cfg" "~/.config"))
		(box :orientation "h" :space-evenly "false" :vexpand "false" :hexpand "false" 
			(button :class "iconfolder6" :onclick "scripts/open_folders --local" "󱁿")
			(button :class "label_folder6" :onclick "scripts/open_folders --local" "~/.local"))))

;; weather
(defwidget weather [] 
	(box :class "genwin" 
		(box :orientation "v" :spacing 10 :space-evenly "false" :vexpand "false" :hexpand "false" 
			(box :orientation "h" :vexpand "false" :hexpand "false" 
				(label :class "iconweather" :halign "start" :style "color: ${HEX};" :text ICON)
				(label :class "weather_temp" :halign "end" :text TEMP))
			(box :orientation "v" :spacing 10 :halign "center" :space-evenly "false" :vexpand "false" :hexpand "false" 
				(label :class "weather_stat" :halign "center" :text STAT)
				(label :class "weather_quote" :text QUOTE)
				(label :class "weather_quote weather_quote2" :text QUOTE2)))))

;; music
;;(defwidget music []
;;	(box :class "genwin" :orientation "h" :space-evenly "false" :vexpand "false" :hexpand "false"
;;    	(box :class "spotify-album" :style "background-image: url('${player-art}');")
;;    	(box :orientation "v" :space-evenly "false" :valign "center" :halign "center" :spacing 20 :class "spotify-box"
;;			(box :class "spotify_labels" :orientation "v" :space-evenly "false" :spacing 10:vexpand "false" :hexpand "false"
;;				(label :class "spotify-info" :text "${player-title}" :limit-width "18")
;;				(label :class "spotify-artist" :text "${player-artist}" :limit-width "18"))
;;			(box :class "spotify_buttons" :orientation "h" :halign "center" :space-evenly "false" :spacing 20
;;				(button :onclick "playerctl previous" "ﶴ")
;;				(button :onclick "playerctl -p spotify play-pause" :class "spotify-pp")
;;				(button :onclick "playerctl -p spotify next" "ﶶ"))
;;			(box :class "spotify_track"
;;				(scale :onscroll "" :min 0 :active "true" :max 100 :value CURRENT))))) ;;current music var

;; powerMenu
(defwidget power[]
	(box :class "genwin" :orientation "h" :space-evenly "true" :vexpand "false" :hexpand "false" 
		(button :class "power_shutdown" :onclick "scripts/open_apps --ff" "󰐥")
		(button :class "power_reboot" :onclick "scripts/open_apps --sn" "󰑐")
		(button :class "power_lock" :onclick "scripts/open_apps --dc" "󰌾")
		(button :class "power_sleep" :onclick "scripts/open_apps --si" "󰤄")
		(button :class "power_logout" :onclick "scripts/open_apps --gh" "󰍃")))

;; appsDrawer
(defwidget apps []
	(box :class "genwin" :orientation "v" :space-evenly "true" :vexpand "false" :hexpand "false"
		(box :class "apps_margin" :orientation "v" :space-evenly "true"
		(box :orientation "h" :space-evenly "false" :halign "center" :valign "center"
		(button :style "background-image: url('src/icons/firefox.svg');" :class "app_firefox" :onclick "scripts/open_apps --ff"))
		(box :orientation "h" :space-evenly "true" :halign "center" :valign "center"
		(button :style "background-image: url('src/icons/signal.svg');" :class "app_signal" :onclick "scripts/open_apps --sn"))
		(box :orientation "h" :space-evenly "true" :halign "center" :valign "center"
		(button :style "background-image: url('src/icons/discord.svg');" :class "app_discord" :onclick "scripts/open_apps --dc"))
		(box :orientation "h" :space-evenly "true" :halign "center" :valign "center"
		(button :style "background-image: url('src/icons/spotify.svg');" :class "app_spotify" :onclick "scripts/open_apps --si"))
		(box :orientation "h" :space-evenly "true" :halign "center" :valign "center"
		(button :style "background-image: url('src/icons/github.svg');" :class "app_github" :onclick "scripts/open_apps --gh"))
		(box :orientation "h" :space-evenly "true" :halign "center" :valign "center"
		(button :style "background-image: url('src/icons/vscode.svg');" :class "app_code" :onclick "scripts/open_apps --cd"))
		(box :orientation "h" :space-evenly "true" :halign "center" :valign "center"
		(button :style "background-image: url('src/icons/virtualmachine.svg');" :class "app_vbox" :onclick "scripts/open_apps --vb")))))










;;||===================================||
;;||								   ||
;;||			  WINDOWS			   ||
;;||                                   ||
;;||===================================||

;; background
(defwindow background :stacking "fg" :focusable "false" :screen 1 
	:geometry (geometry :x 0 :y 0 :width "1920px" :height "1080px")
		(bg))

;; profile
(defwindow profile :stacking "fg" :focusable "false" :screen 1 
	:geometry (geometry :x 150 :y 150 :width 350 :height 450)
		(user))

;; system
(defwindow system :stacking "fg" :focusable "false" :screen 1 
	:geometry (geometry :x 150 :y 615 :width 350 :height 315)
		(system))

;;calendar
(defwindow calendar :stacking "fg" :focusable "true" :screen 1 
	:geometry (geometry :x 515 :y 150 :width 550 :height 350)
		(calendarw))

;; time
(defwindow time :stacking "fg" :focusable "false" :screen 1
	:geometry (geometry :x 515 :y 515 :width 550 :height 125)
		(time))

;; fetch
(defwindow fetch :stacking "fg" :focusable "false" :screen 1
		:geometry (geometry :x 515 :y 655 :width 210 :height 275)
					(fetch))

;; directories
(defwindow directories :stacking "fg" :focusable "false" :screen 1 
	    :geometry (geometry :x 740 :y 655 :width 325 :height 275)
					(directories))

;; weather
(defwindow weather :stacking "fg" :focusable "false" :screen 1 
	    :geometry (geometry :x 1080 :y 150 :width 550 :height 325)
					(weather))

;; music
;;(defwindow music :stacking "fg" :focusable "false" :screen 1 
;;	    :geometry (geometry :x 1080 :y 490 :width 550 :height 300)
;;					(music))

;; power menu
(defwindow power :stacking "fg" :focusable "false" :screen 1 
	    :geometry (geometry :x 1080 :y 805 :width 550 :height 125)
					(power))

;; apps drawer
(defwindow apps :stacking "fg" :focusable "false" :screen 1 
	    :geometry (geometry :x 1645 :y 150 :width 125 :height 780)
					(apps))








